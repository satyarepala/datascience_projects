import pandas as pd
import numpy as np

def calculate_ks(df, actual_col, predicted_col):
    # Sort by predicted probabilities
    df = df.sort_values(by=predicted_col, ascending=False).reset_index(drop=True)
    
    # Cumulative distributions
    df['cumulative_goods'] = (df[actual_col] == 0).cumsum() / (df[actual_col] == 0).sum()
    df['cumulative_bads'] = (df[actual_col] == 1).cumsum() / (df[actual_col] == 1).sum()
    
    # KS Statistic
    df['ks'] = abs(df['cumulative_goods'] - df['cumulative_bads'])
    ks_stat = df['ks'].max()
    return ks_stat, df

# Example usage:
# ks_stat, ks_df = calculate_ks(df, actual_col='actual', predicted_col='predicted')
# print("KS Statistic:", ks_stat)



def calculate_iv(df, actual_col, predicted_col, bins=10):
    # Bin predicted probabilities into quantiles
    df['bins'] = pd.qcut(df[predicted_col], bins, duplicates='drop')

    # Group by bins and calculate WOE (Weight of Evidence)
    grouped = df.groupby('bins')
    iv_df = grouped.agg(
        bads=(actual_col, lambda x: (x == 1).sum()),
        goods=(actual_col, lambda x: (x == 0).sum())
    ).reset_index()

    iv_df['total'] = iv_df['bads'] + iv_df['goods']
    iv_df['bad_rate'] = iv_df['bads'] / iv_df['bads'].sum()
    iv_df['good_rate'] = iv_df['goods'] / iv_df['goods'].sum()
    iv_df['woe'] = np.log(iv_df['bad_rate'] / iv_df['good_rate']).replace({np.inf: 0, -np.inf: 0})
    iv_df['iv'] = (iv_df['bad_rate'] - iv_df['good_rate']) * iv_df['woe']
    
    iv = iv_df['iv'].sum()
    return iv, iv_df

# Example usage:
# iv, iv_details = calculate_iv(df, actual_col='actual', predicted_col='predicted')
# print("Information Value (IV):", iv)



import matplotlib.pyplot as plt

def plot_gini_curve(df, actual_col, predicted_col):
    _, df = calculate_ks(df, actual_col, predicted_col)
    
    # Data for plotting
    x = df['cumulative_goods']
    y = df['cumulative_bads']
    random_line = np.linspace(0, 1, len(x))
    
    # Plotting
    plt.figure(figsize=(8, 6))
    plt.plot(x, y, label="Model", color="blue")
    plt.plot(random_line, random_line, label="Random Line", color="red", linestyle="--")
    plt.xlabel("Cumulative Percentage of Goods")
    plt.ylabel("Cumulative Percentage of Bads")
    plt.title("Gini Curve")
    plt.legend()
    plt.grid()
    plt.show()

# Example usage:
# plot_gini_curve(df, actual_col='actual', predicted_col='predicted')




import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Example: Replace this with your actual data
data = {'actual': [1, 0, 1, 0, 0, 1, 1, 0, 0, 1],
        'predicted': [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05]}
df = pd.DataFrame(data)

# Sort by predicted probabilities (descending order)
df = df.sort_values(by='predicted', ascending=False).reset_index(drop=True)

# Calculate cumulative percentages
df['cumulative_goods'] = (df['actual'] == 0).cumsum() / (df['actual'] == 0).sum()
df['cumulative_bads'] = (df['actual'] == 1).cumsum() / (df['actual'] == 1).sum()

# Calculate KS statistic
df['ks'] = abs(df['cumulative_goods'] - df['cumulative_bads'])
ks_stat = df['ks'].max()
ks_index = df['ks'].idxmax()

# Plot the KS curve
plt.figure(figsize=(10, 6))
plt.plot(df['cumulative_goods'], label='Cumulative % of Goods (Actual 0)', color='blue')
plt.plot(df['cumulative_bads'], label='Cumulative % of Bads (Actual 1)', color='red')
plt.axvline(x=ks_index, color='gray', linestyle='--', label=f'KS = {ks_stat:.2f}')
plt.axhline(y=df.loc[ks_index, 'cumulative_goods'], color='blue', linestyle='--', alpha=0.5)
plt.axhline(y=df.loc[ks_index, 'cumulative_bads'], color='red', linestyle='--', alpha=0.5)

# Add labels and legend
plt.title('KS Curve')
plt.xlabel('Data Points (Sorted by Predicted Probability)')
plt.ylabel('Cumulative Percentage')
plt.legend(loc='lower right')
plt.grid(alpha=0.3)

# Show the plot
plt.show()