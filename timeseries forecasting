import pandas as pd
import numpy as np
from pyspark.sql import SparkSession
from pyspark.sql.types import StructType, StructField, IntegerType, StringType, DoubleType
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.holtwinters import SimpleExpSmoothing
from statsmodels.tsa.statespace.sarimax import SARIMAX
from prophet import Prophet

# Initialize Spark
spark = SparkSession.builder.appName("TimeSeriesForecasting").getOrCreate()

# Sample PySpark DataFrame (Replace with actual data)
data = [(101, i, np.random.randint(50, 500)) for i in range(1, 13)] + \
       [(102, i, np.random.randint(100, 800)) for i in range(1, 13)]
schema = ["MATERIAL_ID", "BILLING_MONTH", "BILLING_QTY"]
pyspark_df = spark.createDataFrame(data, schema=schema)

# Convert PySpark DataFrame to Pandas
df = pyspark_df.toPandas()

# Define forecasting function
def forecast_material(df, material_id):
    results = []
    material_df = df[df["MATERIAL_ID"] == material_id].sort_values("BILLING_MONTH")

    # Moving Average Model (Simple Exponential Smoothing)
    model_mvg = SimpleExpSmoothing(material_df["BILLING_QTY"]).fit()
    forecast_mvg = model_mvg.forecast(12)

    # ARIMA Model
    model_arima = ARIMA(material_df["BILLING_QTY"], order=(2,1,2)).fit()
    forecast_arima = model_arima.forecast(12)

    # SARIMA Model
    model_sarima = SARIMAX(material_df["BILLING_QTY"], order=(2,1,2), seasonal_order=(1,1,1,12)).fit()
    forecast_sarima = model_sarima.forecast(12)

    # Prophet Model
    prophet_df = material_df.rename(columns={"BILLING_MONTH": "ds", "BILLING_QTY": "y"})
    prophet_df["ds"] = pd.to_datetime("2024") + pd.to_timedelta(prophet_df["ds"] - 1, unit="M")
    prophet_model = Prophet()
    prophet_model.fit(prophet_df)
    future = prophet_model.make_future_dataframe(periods=12, freq="M")
    forecast_prophet = prophet_model.predict(future).iloc[-12:]["yhat"].values

    # Store results
    for i, (mvg, arima, sarima, prophet) in enumerate(zip(forecast_mvg, forecast_arima, forecast_sarima, forecast_prophet), start=13):
        results.append((material_id, "MOVING_AVG", i, mvg))
        results.append((material_id, "ARIMA", i, arima))
        results.append((material_id, "SARIMA", i, sarima))
        results.append((material_id, "PROPHET", i, prophet))

    return results

# Apply forecasting to each MATERIAL_ID
forecast_results = []
for material_id in df["MATERIAL_ID"].unique():
    forecast_results.extend(forecast_material(df, material_id))

# Create Pandas DataFrame
forecast_df = pd.DataFrame(forecast_results, columns=["MATERIAL_ID", "MODEL_NAME", "BILLING_MONTH", "BILLING_QTY"])

# Convert Pandas DataFrame to PySpark DataFrame
schema = StructType([
    StructField("MATERIAL_ID", IntegerType(), True),
    StructField("MODEL_NAME", StringType(), True),
    StructField("BILLING_MONTH", IntegerType(), True),
    StructField("BILLING_QTY", DoubleType(), True)
])
pyspark_forecast_df = spark.createDataFrame(forecast_df, schema=schema)

# Show final PySpark DataFrame
pyspark_forecast_df.show()


The warning messages indicate that Statsmodels ARIMA/SARIMA models are expecting a time-based index but are receiving an unsupported index. The models expect datetime-based indices (e.g., pd.DatetimeIndex).

Solution

You need to convert BILLING_MONTH to a proper datetime format before fitting the models.

Fix

Modify the forecast_material function to explicitly set a datetime index:

def forecast_material(df, material_id):
    results = []
    material_df = df[df["MATERIAL_ID"] == material_id].sort_values("BILLING_MONTH").copy()

    # Convert BILLING_MONTH to datetime format
    material_df["BILLING_MONTH"] = pd.to_datetime("2024-01-01") + pd.to_timedelta(material_df["BILLING_MONTH"] - 1, unit="M")
    material_df.set_index("BILLING_MONTH", inplace=True)

    # Moving Average Model (Simple Exponential Smoothing)
    model_mvg = SimpleExpSmoothing(material_df["BILLING_QTY"]).fit()
    forecast_mvg = model_mvg.forecast(12)

    # ARIMA Model
    model_arima = ARIMA(material_df["BILLING_QTY"], order=(2,1,2), freq="M").fit()
    forecast_arima = model_arima.forecast(12)

    # SARIMA Model
    model_sarima = SARIMAX(material_df["BILLING_QTY"], order=(2,1,2), seasonal_order=(1,1,1,12), freq="M").fit()
    forecast_sarima = model_sarima.forecast(12)

    # Prophet Model
    prophet_df = material_df.reset_index().rename(columns={"BILLING_MONTH": "ds", "BILLING_QTY": "y"})
    prophet_model = Prophet()
    prophet_model.fit(prophet_df)
    future = prophet_model.make_future_dataframe(periods=12, freq="M")
    forecast_prophet = prophet_model.predict(future).iloc[-12:]["yhat"].values

    # Store results
    for i, (mvg, arima, sarima, prophet) in enumerate(zip(forecast_mvg, forecast_arima, forecast_sarima, forecast_prophet), start=1):
        results.append((material_id, "MOVING_AVG", i, mvg))
        results.append((material_id, "ARIMA", i, arima))
        results.append((material_id, "SARIMA", i, sarima))
        results.append((material_id, "PROPHET", i, prophet))

    return results

What This Fix Does

✅ Converts BILLING_MONTH into a proper datetime format starting from 2024-01-01.
✅ Sets BILLING_MONTH as an index so that ARIMA/SARIMA can recognize it as a valid time series.
✅ Adds freq="M" in ARIMA and SARIMA to indicate monthly frequency.

Try this and let me know if you still see any issues!


import warnings

# Suppress all warnings
warnings.filterwarnings("ignore")

# Suppress only specific warnings (e.g., FutureWarnings)
warnings.simplefilter(action="ignore", category=FutureWarning)
warnings.simplefilter(action="ignore", category=UserWarning)

