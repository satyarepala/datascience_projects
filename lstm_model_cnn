import torch
import torch.nn as nn
import torch.nn.init as init
from torch.nn.utils.rnn import pack_padded_sequence, pad_packed_sequence

class LSTM_CNN_Classifier(nn.Module):
    def __init__(self, input_size, hidden_size, num_layers, cnn_channels, kernel_size):
        super(LSTM_CNN_Classifier, self).__init__()

        self.batch_norm = nn.BatchNorm1d(input_size)
        self.instance_norm = nn.InstanceNorm1d(input_size)
        
        # LSTM Layer
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)
        
        # CNN Layer (1D Convolution)
        self.conv1d = nn.Conv1d(in_channels=hidden_size, out_channels=cnn_channels, 
                                kernel_size=kernel_size, padding=kernel_size // 2)

        # Fully connected layer for classification
        self.fc = nn.Linear(cnn_channels, 1)  # Output logits

        # Weight Initialization
        self._initialize_weights()

    def forward(self, x, lengths):
        x = x.permute(0, 2, 1)  # (batch, features, seq_len)
        x = self.batch_norm(x)
        x = self.instance_norm(x)
        x = x.permute(0, 2, 1)  # Back to (batch, seq_len, features)
        
        # Pack the padded sequences before passing to LSTM
        packed_input = pack_padded_sequence(x, lengths, batch_first=True, enforce_sorted=False)
        
        # Initialize hidden and cell state
        h0 = torch.zeros(self.lstm.num_layers, x.size(0), self.lstm.hidden_size).to(x.device)
        c0 = torch.zeros(self.lstm.num_layers, x.size(0), self.lstm.hidden_size).to(x.device)
        
        # Pass through LSTM
        packed_output, (hn, cn) = self.lstm(packed_input, (h0, c0))
        
        # Unpack if needed
        output, _ = pad_packed_sequence(packed_output, batch_first=True)
        
        # Convert (batch, seq_len, hidden_size) â†’ (batch, hidden_size, seq_len) for CNN
        output = output.permute(0, 2, 1)
        
        # Apply CNN
        cnn_out = self.conv1d(output)  # (batch, cnn_channels, seq_len)
        cnn_out = torch.mean(cnn_out, dim=2)  # Global Average Pooling (batch, cnn_channels)
        
        # Classification layer
        logits = self.fc(cnn_out)  # (batch, 1)
        
        return logits  # No Sigmoid, use BCEWithLogitsLoss

    def _initialize_weights(self):
        for name, param in self.lstm.named_parameters():
            if "weight" in name:
                init.xavier_uniform_(param)