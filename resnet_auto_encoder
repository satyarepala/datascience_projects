import torch
import torch.nn as nn
import torch.nn.functional as FUNC

class ResidualBlock(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size=3, dropout_prob=0.2):
        super(ResidualBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size, padding=1)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size, padding=1)
        self.bn2 = nn.BatchNorm2d(out_channels)
        self.dropout = nn.Dropout(dropout_prob)

        if in_channels != out_channels:
            self.residual = nn.Conv2d(in_channels, out_channels, kernel_size=1)
        else:
            self.residual = nn.Identity()

    def forward(self, x):
        residual = self.residual(x)
        out = FUNC.relu(self.bn1(self.conv1(x)))
        out = self.dropout(out)
        out = self.bn2(self.conv2(out))
        out += residual
        return FUNC.relu(out)

class Autoencoder(nn.Module):
    def __init__(self, input_shape, dropout_prob=0.2):
        super(Autoencoder, self).__init__()
        self.input_shape = input_shape
        
        # Encoder
        self.encoder = nn.Sequential(
            ResidualBlock(in_channels=1, out_channels=16, dropout_prob=dropout_prob),
            nn.MaxPool2d(2),
            ResidualBlock(in_channels=16, out_channels=32, dropout_prob=dropout_prob),
            nn.MaxPool2d(2),
            ResidualBlock(in_channels=32, out_channels=64, dropout_prob=dropout_prob),
        )

        # Decoder
        self.decoder = nn.Sequential(
            ResidualBlock(in_channels=64, out_channels=32, dropout_prob=dropout_prob),
            nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True),
            ResidualBlock(in_channels=32, out_channels=16, dropout_prob=dropout_prob),
            nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True),
            ResidualBlock(in_channels=16, out_channels=1, dropout_prob=dropout_prob)
        )
        
    def forward(self, x):
        encoded = self.encoder(x)
        decoded = self.decoder(encoded)
        return decoded

# Define input shape and create the model
input_shape = (7, 100)
model = Autoencoder(input_shape)

# Sample input to test the architecture
sample_input = torch.randn(1, 1, *input_shape)  # Batch size 1, single channel, 7x100 matrix
output = model(sample_input)

print("Input shape:", sample_input.shape)
print("Output shape:", output.shape)




import torch
import torch.nn as nn
import torch.nn.functional as FUNC

class ResidualBlock(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size=3, dropout_prob=0.2):
        super(ResidualBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size, padding=1)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size, padding=1)
        self.bn2 = nn.BatchNorm2d(out_channels)
        self.dropout = nn.Dropout(dropout_prob)

        if in_channels != out_channels:
            self.residual = nn.Conv2d(in_channels, out_channels, kernel_size=1)
        else:
            self.residual = nn.Identity()

    def forward(self, x):
        residual = self.residual(x)
        out = FUNC.relu(self.bn1(self.conv1(x)))
        out = self.dropout(out)
        out = self.bn2(self.conv2(out))
        out += residual
        return FUNC.relu(out)

class Autoencoder(nn.Module):
    def __init__(self, input_shape, num_residual_layers=3, dropout_prob=0.2):
        super(Autoencoder, self).__init__()
        self.input_shape = input_shape
        self.num_residual_layers = num_residual_layers
        
        # Encoder
        encoder_layers = []
        in_channels = 1
        out_channels = 16

        for _ in range(num_residual_layers):
            encoder_layers.append(ResidualBlock(in_channels, out_channels, dropout_prob=dropout_prob))
            encoder_layers.append(nn.MaxPool2d(2))
            in_channels = out_channels
            out_channels *= 2  # Double the number of channels after each block

        self.encoder = nn.Sequential(*encoder_layers)

        # Decoder
        decoder_layers = []
        for _ in range(num_residual_layers):
            out_channels //= 2  # Halve the number of channels before each block
            decoder_layers.append(ResidualBlock(in_channels, out_channels, dropout_prob=dropout_prob))
            decoder_layers.append(nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True))
            in_channels = out_channels

        # Final layer to match input dimensions
        decoder_layers.append(nn.Conv2d(in_channels, 1, kernel_size=3, padding=1))
        
        self.decoder = nn.Sequential(*decoder_layers)
        
    def forward(self, x):
        encoded = self.encoder(x)
        decoded = self.decoder(encoded)
        
        # Ensure output shape matches input shape
        output = FUNC.interpolate(decoded, size=self.input_shape, mode='bilinear', align_corners=True)
        return output

# Define input shape and create the model
input_shape = (7, 100)
num_residual_layers = 3
dropout_prob = 0.3

model = Autoencoder(input_shape, num_residual_layers=num_residual_layers, dropout_prob=dropout_prob)

# Sample input to test the architecture
sample_input = torch.randn(1, 1, *input_shape)  # Batch size 1, single channel, 7x100 matrix
output = model(sample_input)

print("Input shape:", sample_input.shape)
print("Output shape:", output.shape)

