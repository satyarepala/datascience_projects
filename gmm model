import numpy as np
from sklearn.mixture import GaussianMixture
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# Example data for Class A and Class B
# Replace this with your actual data
np.random.seed(42)
list1 = np.random.rand(50, 1024)  # Class A data points
list2 = np.random.rand(50, 1024)  # Class B data points

# Combine data points
X = np.vstack((list1, list2))
labels_true = np.array([0] * len(list1) + [1] * len(list2))  # Class labels: 0 for Class A, 1 for Class B

# Apply Gaussian Mixture Model
gmm = GaussianMixture(n_components=2, random_state=42)
gmm.fit(X)
cluster_labels = gmm.predict(X)

# Dimensionality Reduction for Visualization
pca = PCA(n_components=2)  # Reduce to 2D for visualization
X_reduced = pca.fit_transform(X)

# Visualize Clusters
plt.figure(figsize=(10, 7))
plt.scatter(X_reduced[cluster_labels == 0, 0], X_reduced[cluster_labels == 0, 1], label='Cluster 1', c='lightblue')
plt.scatter(X_reduced[cluster_labels == 1, 0], X_reduced[cluster_labels == 1, 1], label='Cluster 2', c='orange')

# Overlay original class labels for visualization clarity
plt.scatter(X_reduced[labels_true == 0, 0], X_reduced[labels_true == 0, 1], label='Class A', edgecolor='blue', facecolors='none')
plt.scatter(X_reduced[labels_true == 1, 0], X_reduced[labels_true == 1, 1], label='Class B', edgecolor='red', facecolors='none')

plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.title('Gaussian Mixture Model Clustering')
plt.legend()
plt.show()

# Count points in each cluster by class
counts = {
    'Cluster 1': {'Class A': 0, 'Class B': 0},
    'Cluster 2': {'Class A': 0, 'Class B': 0}
}

for i, cluster_label in enumerate(cluster_labels):
    if cluster_label == 0:
        if labels_true[i] == 0:
            counts['Cluster 1']['Class A'] += 1
        else:
            counts['Cluster 1']['Class B'] += 1
    else:
        if labels_true[i] == 0:
            counts['Cluster 2']['Class A'] += 1
        else:
            counts['Cluster 2']['Class B'] += 1

# Print results
print("Counts in each cluster:")
for cluster, count in counts.items():
    print(f"{cluster}: Class A = {count['Class A']}, Class B = {count['Class B']}")