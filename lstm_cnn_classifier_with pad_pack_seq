import torch
import torch.nn as nn
import torch.nn.init as init
from torch.nn.utils.rnn import pack_padded_sequence, pad_packed_sequence

class LSTMClassifier(nn.Module):
    def __init__(self, input_size, hidden_size, num_layers):
        super(LSTMClassifier, self).__init__()
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)
        self.fc = nn.Linear(hidden_size, 1)
        
        # Apply weight initialization
        self._initialize_weights()

    def forward(self, x, lengths):
        # Initialize hidden state and cell state
        h0 = torch.zeros(self.lstm.num_layers, x.size(0), self.lstm.hidden_size).to(x.device)
        c0 = torch.zeros(self.lstm.num_layers, x.size(0), self.lstm.hidden_size).to(x.device)
        
        # Pack the padded sequences before passing to LSTM
        packed_input = pack_padded_sequence(x, lengths, batch_first=True, enforce_sorted=False)

        # Pass the packed sequences to the LSTM
        packed_output, (hn, cn) = self.lstm(packed_input, (h0, c0))
        
        # Unpack the output if needed
        # output, _ = pad_packed_sequence(packed_output, batch_first=True)
        
        # Pass the last hidden state (hn[-1]) to the fully connected layer for classification
        out = self.fc(hn[-1])  # Use the last hidden state from the final layer of LSTM
        
        return out
    
    def _initialize_weights(self):
        # Initialize LSTM weights
        for name, param in self.lstm.named_parameters():
            if 'weight_ih' in name:  # input-hidden weights
                init.xavier_uniform_(param.data)
            elif 'weight_hh' in name:  # hidden-hidden weights
                init.orthogonal_(param.data)
            elif 'bias' in name:  # biases
                param.data.fill_(0)
                
        # Initialize fully connected layer weights
        init.xavier_uniform_(self.fc.weight)
        self.fc.bias.data.fill_(0)


# Example input data processing before passing to the model
# Assuming your data loader gives you padded sequences and the lengths of the non-padded sequences
x = torch.randn(32, 100, 57)  # Batch of 32, each with 100 time steps and 57 features
lengths = torch.randint(1, 100, (32,))  # Random lengths for sequences (1 to 100)

# Create the model and test forward pass
input_size = 57
hidden_size = 64
num_layers = 2
model = LSTMClassifier(input_size, hidden_size, num_layers)

output = model(x, lengths)
print(output.shape)  # Output shape should be (batch_size, 1)
