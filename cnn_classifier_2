import torch
import torch.nn as nn
import torch.nn.functional as F

class CNNClassifier(nn.Module):
    def __init__(self, input_size, num_filters, filter_size, hidden_size):
        super(CNNClassifier, self).__init__()
        self.conv1 = nn.Conv1d(in_channels=input_size, out_channels=num_filters, kernel_size=filter_size, padding=filter_size//2)
        self.conv2 = nn.Conv1d(in_channels=num_filters, out_channels=num_filters, kernel_size=filter_size, padding=filter_size//2)
        self.fc1 = nn.Linear(num_filters, hidden_size)
        self.fc2 = nn.Linear(hidden_size, 1)

        # Initialize weights
        self._initialize_weights()

    def forward(self, x):
        # CNN expects input in (batch_size, input_channels, sequence_length) format
        x = x.permute(0, 2, 1)  # Reshape to (batch_size, input_size, sequence_length)
        
        # Apply convolution layers
        x = F.relu(self.conv1(x))  # First convolution
        x = F.relu(self.conv2(x))  # Second convolution

        # Global Max Pooling over time dimension (sequence length)
        x = torch.max(x, dim=2)[0]  # Output shape: (batch_size, num_filters)

        # Fully connected layers
        x = F.relu(self.fc1(x))
        out = self.fc2(x)  # Output shape: (batch_size, 1)

        return out

    def _initialize_weights(self):
        # Initialize CNN layer weights
        nn.init.xavier_uniform_(self.conv1.weight)
        nn.init.xavier_uniform_(self.conv2.weight)
        self.conv1.bias.data.fill_(0)
        self.conv2.bias.data.fill_(0)

        # Initialize fully connected layer weights
        nn.init.xavier_uniform_(self.fc1.weight)
        nn.init.xavier_uniform_(self.fc2.weight)
        self.fc1.bias.data.fill_(0)
        self.fc2.bias.data.fill_(0)

# Initialize CNN model, loss function, and optimizer
input_size = 10  # Number of features at each time step
num_filters = 64  # Number of filters in the convolution layers
filter_size = 3  # Size of the convolution kernel
hidden_size = 64  # Size of hidden layer
model = CNNClassifier(input_size, num_filters, filter_size, hidden_size)

# Test the model with random input
x = torch.randn(32, 50, 10)  # Batch of 32, sequence length of 100, 10 features at each timestep
output = model(x)
print(output.shape)  # Should output torch.Size([32, 1])
